name: Publish PokerBots.Abstractions NuGet Package to nuget.org

on:
  push:
    branches:
      - master # Trigger a build and publish when changes are pushed to the 'master' branch

  # Optional: Also trigger on tags for official releases, e.g., v1.0.0
  # tags:
  #   - 'v*.*.*'

jobs:
  publish:
    runs-on: ubuntu-latest

    # Permissions are still good practice, but 'packages: write' is less critical here
    # as we're pushing to nuget.org, not GitHub Packages.
    permissions:
      contents: read   # Required to checkout the repository code

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore NuGet dependencies
        run: dotnet restore
        # No special env variables needed here as we're primarily restoring from nuget.org
        # and won't be consuming from GitHub Packages in this pipeline.

      - name: Build the project
        run: dotnet build --configuration Release --no-restore

      - name: Pack the NuGet package
        # This command creates the .nupkg file.
        # Ensure your .csproj has <PackageVersion> or <Version> defined.
        run: dotnet pack --configuration Release -o nupkg --no-build

      - name: Publish NuGet package to nuget.org
        # This command pushes the generated .nupkg file to nuget.org.
        # --source specifies the nuget.org API endpoint.
        # --api-key uses the secret API key you added to GitHub.
        run: dotnet nuget push nupkg/*.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }}
        env:
          # You might want to include the username if the source requires it (nuget.org usually doesn't for the API key)
          # NUGET_USERNAME: 'gherghett'
          # NUGET_AUTH_TOKEN: ${{ secrets.NUGET_API_KEY }} # This can also work if you configure a NuGet.Config that maps this